package middle_level;

import java.util.*;

/**
 * 数据结构设计
 * 380. 常数时间插入、删除和获取随机元素
 * 设计一个支持在平均时间复杂度 O(1)下，执行以下操作的数据结构。
 *
 * insert(val)：当元素 val 不存在时，向集合中插入该项。
 * remove(val)：元素 val 存在时，从集合中移除该项。
 * getRandom：随机返回现有集合中的一项。每个元素应该有相同的概率被返回。
 * 示例 :
 *
 * // 初始化一个空的集合。
 * RandomizedSet randomSet = new RandomizedSet();
 *
 * // 向集合中插入 1 。返回 true 表示 1 被成功地插入。
 * randomSet.insert(1);
 *
 * // 返回 false ，表示集合中不存在 2 。
 * randomSet.remove(2);
 *
 * // 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。
 * randomSet.insert(2);
 *
 * // getRandom 应随机返回 1 或 2 。
 * randomSet.getRandom();
 *
 * // 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。
 * randomSet.remove(1);
 *
 * // 2 已在集合中，所以返回 false 。
 * randomSet.insert(2);
 *
 * // 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。
 * randomSet.getRandom();
 *
 * @author Wang Guolong
 * @version 1.0
 * @date 2020/11/2 8:20 下午
 */
public class RandomizedSet {

    private List<Integer> nums;
    private Map<Integer, Integer> valToIndex;
    private Random rand = new Random();

    /** Initialize your data structure here. */
    public RandomizedSet() {
        // 存储元素的值
        nums = new ArrayList<>();
        // 记录每个元素对应在nums中的索引
        valToIndex = new HashMap<>();
    }

    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        // 如果已经存在 不需要插入
        if (valToIndex.containsKey(val)) {
            return false;
        }
        // 更新map索引并插入nums尾部
        valToIndex.put(val, nums.size());
        nums.add(val);
        return true;
    }

    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        // 如果不存在 不用删除
        if (!valToIndex.containsKey(val)) {
            return false;
        }
        // 移动到尾部 并删除
        // 得到要删除元素的索引
        int index = valToIndex.get(val);
        // 找到最后一个元素
        int lastNum = nums.get(nums.size() - 1);
        // 更新最后一个元素的索引
        valToIndex.put(lastNum, index);
        // 交换删除元素到最后
        nums.set(index, lastNum);
        nums.remove(nums.size() - 1);
        valToIndex.remove(val);
        return true;
    }

    /** Get a random element from the set. */
    public int getRandom() {
        return nums.get(rand.nextInt(nums.size()));
    }
}
