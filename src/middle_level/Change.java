package middle_level;

/**
 * 518. 零钱兑换 II
 *
 * 注意！！！！ 和377的区别
 *  * 「力扣」 第 377 题：一个组合的不同排列是一个新的组合。[1, 1, 2]、[1, 2, 2]、[2, 1, 2] 视为为不同的组合。
 *  * 「力扣」 第 518 题：一个组合的不同排列在结果集中只出现一次，这一点是「背包问题」的特征，拿东西的顺序不重要。[2, 2, 1] 是一个组合，[1, 2, 2] 和 [2, 1, 2] 不是新的组合。
 *
 * 给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。
 *
 * 示例 1:
 *
 * 输入: amount = 5, coins = [1, 2, 5]
 * 输出: 4
 * 解释: 有四种方式可以凑成总金额:
 * 5=5
 * 5=2+2+1
 * 5=2+1+1+1
 * 5=1+1+1+1+1
 * 示例 2:
 *
 * 输入: amount = 3, coins = [2]
 * 输出: 0
 * 解释: 只用面额2的硬币不能凑成总金额3。
 * 示例 3:
 *
 * 输入: amount = 10, coins = [10]
 * 输出: 1
 *
 * 注意:
 *
 * 你可以假设：
 *
 * 0 <= amount (总金额) <= 5000
 * 1 <= coin (硬币面额)<= 5000
 * 硬币种类不超过 500 种
 * 结果符合 32 位符号整数
 *
 * @author Wang Guolong
 * @version 1.0
 * @date 2020/10/20 2:15 下午
 */
public class Change {
    public int change(int amount, int[] coins) {
        int[] dp = new int[amount + 1];
        dp[0] = 1;

        // 对于每个目标，这个数字在第一次出现和第二次出现是一样的，所以以coins的顺序为准来遍历比较好
        for (int coin : coins) {
            for (int x = coin; x < amount + 1; ++x) {
                dp[x] += dp[x - coin];
            }
        }
        return dp[amount];
    }
}
