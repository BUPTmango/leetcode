package simple_level.jianzhi_offer;

/**
 * 面试题04. 二维数组中的查找
 * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
 *
 * 示例:
 *
 * 现有矩阵 matrix 如下：
 *
 * [
 *   [1,   4,  7, 11, 15],
 *   [2,   5,  8, 12, 19],
 *   [3,   6,  9, 16, 22],
 *   [10, 13, 14, 17, 24],
 *   [18, 21, 23, 26, 30]
 * ]
 * 给定 target?=?5，返回?true。
 *
 * 给定?target?=?20，返回?false。
 *
 * 限制：
 *
 * 0 <= n <= 1000
 *
 * 0 <= m <= 1000
 *
 * @author Wang Guolong
 * @version 1.0
 * @date 2020/3/15 8:42 上午
 */
public class FindNumberIn2DArray {
    /**
     * 从右上角开始 遍历向左和向下两个方向
     * @param matrix
     * @param target
     * @return
     */
    public boolean findNumberIn2DArray(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0) {
            return false;
        }
        int m = matrix.length, n = matrix[0].length;
        int curRow = 0, curCol = n - 1;
        while (curCol >= 0 && curRow < m ) {
            int cur = matrix[curRow][curCol];
            if (cur == target) {
                return true;
            } else if (cur > target) {
                curCol--;
            } else {
                curRow++;
            }
        }
        return false;
    }
}
