package simple_level;

/**
 * 颠倒给定的 32 位无符号整数的二进制位。
 *
 * 示例 1：
 * 输入: 00000010100101000001111010011100
 * 输出: 00111001011110000010100101000000
 * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 *       因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 *
 * 示例 2：
 * 输入：11111111111111111111111111111101
 * 输出：10111111111111111111111111111111
 * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 *       因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。
 *
 * 提示：
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
 * @author Wang Guolong
 * @create 2019-03-29 4:25 PM
 */
public class ReverseBits {
    // you need treat n as an unsigned value

    /**
     * 该题主要考察位运算。由于限制位数为32位，所以只需对待处理的整数n进行32次右移位，
     * 每当低位&1的结果为1，说明低位为1，此时将待输出的目标整数(默认值为0)左移动一位并加上1；
     * 每当低位&1的结果为0，说明低位为0，此时将待输出的目标整数左移一位即可；
     * 循环直到移动完32次，所得目标整数即为所求。
     *
     * @param n
     * @return
     */
    public int reverseBits(int n) {
        int value = 0;
        // 32位无符号数
        for (int i = 0; i < 32; ++i) {
            if ((n & 1) == 1) {
                value = (value << 1) + 1; // 左移动
                n >>= 1;
            } else {
                value = value << 1;
                n >>= 1; // 右移
            }
        }
        return value;
    }
}