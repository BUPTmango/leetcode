package hard_level;

/**
 * 887. 鸡蛋掉落
 * 你将获得K个鸡蛋，并可以使用一栋从1到N共有 N层楼的建筑。
 *
 * 每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。
 *
 * 你知道存在楼层F ，满足0 <= F <= N 任何从高于 F的楼层落下的鸡蛋都会碎，从F楼层或比它低的楼层落下的鸡蛋都不会破。
 *
 * 每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层X扔下（满足1 <= X <= N）。
 *
 * 你的目标是确切地知道 F 的值是多少。
 *
 * 无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？
 *
 * 示例 1：
 *
 * 输入：K = 1, N = 2
 * 输出：2
 * 解释：
 * 鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。
 * 否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。
 * 如果它没碎，那么我们肯定知道 F = 2 。
 * 因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。
 * 示例 2：
 *
 * 输入：K = 2, N = 6
 * 输出：3
 * 示例 3：
 *
 * 输入：K = 3, N = 14
 * 输出：4
 * 
 *
 * 提示：
 *
 * 1 <= K <= 100
 * 1 <= N <= 10000
 *
 * @author Wang Guolong
 * @version 1.0
 * @date 2021/1/13 4:52 下午
 */
public class SuperEggDrop {
    public int superEggDrop(int K, int N) {
        // dp[k][m] = n 表示 当前有k个鸡蛋，最多可以尝试m次，最坏情况下能测试n层的楼
        // m最多不会超过n次（线性扫描）
        int[][] dp = new int[K + 1][N + 1];
        // base case
        // dp[0][..] = 0
        // dp[..][0] = 0
        int m = 0;
        while (dp[K][m] < N) {
            m++;
            for (int k = 1; k <= K; k++) {
                // 总楼层数 = 楼上的楼层数 + 楼下的楼层数 + 1（当前楼层）
                dp[k][m] = dp[k][m - 1] + dp[k - 1][m - 1] + 1;
            }
        }
        return m;
    }
}
